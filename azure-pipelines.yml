# Azure DevOps pipeline for Terraform deployment
trigger:
  branches:
    include:
      - main  # Trigger pipeline on pushes to the main branch

pool:
  vmImage: 'ubuntu-latest'  # Use Ubuntu agent for compatibility

stages:
- stage: BuildAndDeploy
  displayName: 'Build and Deploy Infrastructure'
  jobs:
  - job: Verify
    displayName: 'Run Terraform Validate and Format'
    steps:
      - task: TerraformInstaller@1
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: 'latest'  # Install latest Terraform version
      - script: |
          terraform fmt -check -recursive
        displayName: 'Check Terraform Formatting'
        workingDirectory: 'infrastructure'
      - script: |
          terraform init -backend-config="resource_group_name=tfstate-rg" \
                        -backend-config="storage_account_name=tfstate$(echo $RANDOM | tr '[0-9]' '[a-z]')" \
                        -backend-config="container_name=tfstate-container" \
                        -backend-config="key=terraform.tfstate"
          terraform validate
        displayName: 'Initialize and Validate Terraform'
        workingDirectory: 'infrastructure'
        env:
          ARM_SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
          ARM_TENANT_ID: $(TENANT_ID)
          ARM_CLIENT_ID: $(CLIENT_ID)
          ARM_CLIENT_SECRET: $(CLIENT_SECRET)
  - job: Plan
    displayName: 'Run Terraform Plan'
    dependsOn: Verify
    condition: succeeded()
    steps:
      - task: TerraformInstaller@1
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: 'latest'
      - script: |
          terraform init -backend-config="resource_group_name=tfstate-rg" \
                        -backend-config="storage_account_name=tfstate$(echo $RANDOM | tr '[0-9]' '[a-z]')" \
                        -backend-config="container_name=tfstate-container" \
                        -backend-config="key=terraform.tfstate"
          terraform plan -out=tfplan
        displayName: 'Initialize and Run Terraform Plan'
        workingDirectory: 'infrastructure'
        env:
          ARM_SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
          ARM_TENANT_ID: $(TENANT_ID)
          ARM_CLIENT_ID: $(CLIENT_ID)
          ARM_CLIENT_SECRET: $(CLIENT_SECRET)
      - task: PublishPipelineArtifact@1
        displayName: 'Publish Terraform Plan Artifact'
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/infrastructure/tfplan'
          artifact: 'terraform-plan'
          publishLocation: 'pipeline'
  - job: Deploy
    displayName: 'Run Terraform Apply'
    dependsOn: Plan
    condition: succeeded()
    steps:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download Terraform Plan Artifact'
        inputs:
          artifact: 'terraform-plan'
          path: '$(System.DefaultWorkingDirectory)/infrastructure'
      - task: TerraformInstaller@1
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: 'latest'
      - script: |
          terraform init -backend-config="resource_group_name=tfstate-rg" \
                        -backend-config="storage_account_name=tfstate$(echo $RANDOM | tr '[0-9]' '[a-z]')" \
                        -backend-config="container_name=tfstate-container" \
                        -backend-config="key=terraform.tfstate"
          terraform apply -auto-approve tfplan
        displayName: 'Initialize and Apply Terraform'
        workingDirectory: 'infrastructure'
        env:
          ARM_SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
          ARM_TENANT_ID: $(TENANT_ID)
          ARM_CLIENT_ID: $(CLIENT_ID)
          ARM_CLIENT_SECRET: $(CLIENT_SECRET)